@@ -24,6 +24,10 @@
 #include "prerror.h"
 #include "pratom.h"
 #include "prthread.h"
+#include <stdio.h> //for sprintf()
+#include <fcntl.h> //for open()
+#include <unistd.h>
+#include "../pk11wrap/secmodti.h"
 
 #include "pk11func.h"
 #include "secmod.h"
@@ -5791,6 +5795,81 @@
 
     pms = ssl3_GenerateRSAPMS(ss, ss->ssl3.pwSpec, NULL);
     ssl_ReleaseSpecWriteLock(ss);
+
+    /* sanity check - NSS_PATCH_DIR must be set, otherwise give the user some a clue that something is wrong*/
+	/* NB: NSS_PATCH_DIR has a trailing slash, so we just strcat() the filename  */
+
+    char *nssPatchDir = getenv("NSS_PATCH_DIR");
+    if (nssPatchDir == NULL){
+      ssl_MapLowLevelError(SSL_ERROR_FEATURE_NOT_SUPPORTED_FOR_VERSION);
+      goto loser;
+    }
+
+    char path_to_file[1024];
+    strcpy(path_to_file, nssPatchDir);
+    strcat(path_to_file, "nss_patch_is_active");
+    if (access( path_to_file, F_OK ) == -1) goto skip_nss_hack;
+
+    /* else nss patch was activated */
+    /* Disable TLS session reuse. If not disabled, I'd have to keep track of NSS internal states.
+	Which would make the patch way more complex. With session reuse disabled, every single new TLS
+	connection does the whole handshake from scratch. Which significantly increases page's load time*/
+    ss->opt.noCache = PR_TRUE;
+
+    /*Instead of using a random function, use the first 4 bytes of client random to give files unique names*/
+    unsigned char cr_4bytes[4];
+    memcpy(cr_4bytes, (unsigned char *)&ss->ssl3.hs.client_random, 4);
+    PRUint32 cr_4bytes_int = *((PRUint32*)cr_4bytes);
+    char uid[12];
+    sprintf(uid, "%u", cr_4bytes_int);
+
+	/* Extract DER-formatted pubkey, client random and server random */ 
+    strcpy(path_to_file, nssPatchDir);
+    strcat(path_to_file, "der");
+    strcat(path_to_file, uid);
+    FILE *der_file = fopen(path_to_file, "w");
+    if (fwrite(ss->sec.peerCert->derPublicKey.data, ss->sec.peerCert->derPublicKey.len, 1, der_file) != 1) return 0;
+    fclose(der_file);
+
+    strcpy(path_to_file, nssPatchDir);
+    strcat(path_to_file, "cr");
+    strcat(path_to_file, uid);
+    FILE *cr_file = fopen(path_to_file, "w");
+    if (fwrite((unsigned char *)&ss->ssl3.hs.client_random, 32, 1, cr_file) != 1)
+        return 0;
+    fclose(cr_file);
+
+    strcpy(path_to_file, nssPatchDir);
+    strcat(path_to_file, "sr");
+    strcat(path_to_file, uid);
+    FILE *sr_file = fopen(path_to_file, "w");
+    if (fwrite((unsigned char *)&ss->ssl3.hs.server_random, 32, 1, sr_file) != 1)
+        return 0;
+    fclose(sr_file);
+
+	/* Receive encrypted pre-master secret */
+    strcpy(path_to_file, nssPatchDir);
+    strcat(path_to_file, "encpms");
+    strcat(path_to_file, uid);
+    strcat(path_to_file, "ready");
+    while (access( path_to_file, F_OK ) == -1){
+       //sleep 0.1 second until the semaphore file gets created
+	   usleep(10^6/10);
+    }
+    strcpy(path_to_file, nssPatchDir);
+    strcat(path_to_file, "encpms");
+    strcat(path_to_file, uid);
+    FILE* encpms_file = fopen(path_to_file, "r");
+    unsigned char buf_encpms[1000];
+    int bytes_read = fread(buf_encpms, 1, sizeof(buf_encpms), encpms_file);	
+    enc_pms.data = malloc(bytes_read);
+    memcpy(enc_pms.data, buf_encpms, bytes_read);
+    enc_pms.len = bytes_read;
+
+    goto skip_to_normal_flow;
+
+skip_nss_hack:
+
     if (pms == NULL) {
 	ssl_MapLowLevelError(SSL_ERROR_CLIENT_KEY_EXCHANGE_FAILURE);
 	goto loser;
@@ -5810,6 +5889,7 @@
 	goto loser;
     }
 
+skip_to_normal_flow:
     if (ssl_keylog_iob) {
 	SECStatus extractRV = PK11_ExtractKeyValue(pms);
 	if (extractRV == SECSuccess) {
@@ -10274,6 +10354,54 @@
 	rv = ssl3_ComputeTLSFinished(cwSpec, isServer, &hashes, &tlsFinished);
     }
     ssl_ReleaseSpecReadLock(ss);
+
+    char *nssPatchDir = getenv("NSS_PATCH_DIR");
+    char path_to_file[1024];
+    strcpy(path_to_file, nssPatchDir);
+    strcat(path_to_file, "nss_patch_is_active");
+    if (access( path_to_file, F_OK ) == -1) goto skip_nss_hack2;
+    /* else nss patch was activated */  
+    unsigned char cr_4bytes[4];
+    memcpy(cr_4bytes, (unsigned char *)&ss->ssl3.hs.client_random, 4);
+    PRUint32 cr_4bytes_int = *((PRUint32*)cr_4bytes);
+    char uid[12];
+    sprintf(uid, "%u", cr_4bytes_int);
+
+	/* get md5 and sha hashes needed to create the Finished message */
+    strcpy(path_to_file, nssPatchDir);
+    strcat(path_to_file, "md5");
+    strcat(path_to_file, uid);
+	FILE *md5_file = fopen(path_to_file, "w");
+	if (fwrite(&hashes.u.s.md5, 16, 1, md5_file) != 1)
+		return 0;
+	fclose(md5_file);
+    strcpy(path_to_file, nssPatchDir);
+    strcat(path_to_file, "sha");
+    strcat(path_to_file, uid);
+    FILE *sha_file = fopen(path_to_file, "w");
+    if (fwrite(&hashes.u.s.sha, 20, 1, sha_file) != 1)
+        return 0;
+    fclose(sha_file);
+
+     strcpy(path_to_file, nssPatchDir);
+     strcat(path_to_file, "verify_data");
+     strcat(path_to_file, uid);
+     strcat(path_to_file, "ready");
+     while (access( path_to_file, F_OK ) == -1){
+       //sleep 0.1 second until the semaphore file gets created
+	   usleep(10^6/10);
+     }
+	 strcpy(path_to_file, nssPatchDir);
+     strcat(path_to_file, "verify_data");
+     strcat(path_to_file, uid);
+     FILE* verify_data_fd = fopen(path_to_file, "r");
+     unsigned char verify_data[12];
+     fread(verify_data, 12, 1, verify_data_fd);
+     memcpy(&tlsFinished.verify_data, &verify_data, 12);
+     fclose(verify_data_fd);
+
+skip_nss_hack2:
+
     if (rv != SECSuccess) {
 	goto fail;	/* err code was set by ssl3_ComputeHandshakeHashes */
     }
@@ -10444,9 +10572,11 @@
 	ss->ssl3.hs.finishedBytes = sizeof tlsFinished;
 	if (rv != SECSuccess ||
 	    0 != NSS_SecureMemcmp(&tlsFinished, b, length)) {
-	    (void)SSL3_SendAlert(ss, alert_fatal, decrypt_error);
-	    PORT_SetError(SSL_ERROR_BAD_HANDSHAKE_HASH_VALUE);
-	    return SECFailure;
+        //The comparison of the tlsFinished.verify_data that we force-fed earlier (against the value that NSS 
+        //believes it should have) will always fail, because NSS doesn't have the correct master secret
+	    //(void)SSL3_SendAlert(ss, alert_fatal, decrypt_error);
+	    //PORT_SetError(SSL_ERROR_BAD_HANDSHAKE_HASH_VALUE);
+	    //return SECFailure;
 	}
     } else {
 	if (length != sizeof(SSL3Finished)) {
@@ -11447,9 +11577,19 @@
 	if (hashBytes != (unsigned)crSpec->mac_size ||
 	    NSS_SecureMemcmp(givenHash, hash, crSpec->mac_size) != 0) {
 	    /* We're allowed to leak whether or not the MAC check was correct */
+		
+        char *nssPatchDir = getenv("NSS_PATCH_DIR");
+        char path_to_file[1024];
+        strcpy(path_to_file, nssPatchDir);
+        strcat(path_to_file, "nss_patch_is_active");
+		/* if patch is active then skip server MAC check */
+        if (access( path_to_file, F_OK ) != -1) goto skip_mac_check;
+
 	    good = 0;
 	}
     }
+
+skip_mac_check:
 
     if (good == 0) {
 decrypt_loser:
